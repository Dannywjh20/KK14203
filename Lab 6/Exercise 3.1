import javax.swing.*;
import javax.swing.border.Border;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

public class lab6e3a {
	private JFrame frame;
	private JPanel panel;
	private static Cake cakeClass;
	private JComboBox comboBox;
	private JButton addTopping;
	private JButton finishOrder;
	private JScrollPane scroll;
	private JTextArea textArea, textArea_1;
	private ArrayList<String> order = new ArrayList<>();
	private Border lineborder = BorderFactory.createLineBorder(Color.black);
	private int size = 0;
	private int quantity = 1;
	private JRadioButton small;
	private JRadioButton medium;
	private JRadioButton big;
	private ButtonGroup btnGrp;
	private JTextField textField;
	
	
	
	public lab6e3a(Cake cakeClass) {
		this.cakeClass = cakeClass;
		initialize();
		frame.setVisible(true);
		
	}
	
	private void initialize() {
		frame = new JFrame("GENERIC CAKE MENU");
		frame.setSize(850, 500);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		panel = new JPanel();
		panel.setBounds(0, 0, 850, 500);
		panel.setLayout(null);
		frame.getContentPane().add(panel);
		
		JLabel lblNewLabel = new JLabel("TOPPING");
		lblNewLabel.setBorder(lineborder);
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 16));
		lblNewLabel.setBounds(23, 10, 125, 25);
		panel.add(lblNewLabel);
		
		comboBox= new JComboBox();
		comboBox.setBounds(158, 10, 194, 25);
		panel.add(comboBox);
		
		addTopping = new JButton("ADD TOPPING");
		addTopping.setFont(new Font("Tahoma", Font.BOLD, 12));
		addTopping.setBounds(23, 45, 125, 25);
		addTopping.addActionListener(new addOrderListener());
		panel.add(addTopping);
		
		finishOrder = new JButton("SUBMIT ORDER");
		finishOrder.setFont(new Font("Tahoma", Font.BOLD, 11));
		finishOrder.setBounds(23, 157, 125, 25);
		finishOrder.addActionListener(new submitOrderListener());
		panel.add(finishOrder);
		
		textArea = new JTextArea();
		textArea.setBounds(395, 10, 366, 95);
		textArea.setEditable(false);
		panel.add(textArea);
		
		textArea_1 = new JTextArea(5, 5);
		JScrollPane scroll = new JScrollPane(textArea_1);
		scroll.setBounds(395, 167, 366, 182);
		textArea_1.setEditable(false);
		panel.add(scroll);	
		
		btnGrp = new ButtonGroup();
		
		small = new JRadioButton("Small Cake RM45");
		small.setBounds(395, 111, 125, 30);
		small.addActionListener(new RadioButtonListener());
		btnGrp.add(small);
		panel.add(small);
		
		medium = new JRadioButton("Medium Cake RM65");
		medium.setBounds(522, 111, 138, 30);
		medium.addActionListener(new RadioButtonListener());
		btnGrp.add(medium);
		panel.add(medium);
		
		big = new JRadioButton("Large Cake RM85");
		big.setBounds(662, 111, 128, 30);
		big.addActionListener(new RadioButtonListener());
		btnGrp.add(big);
		panel.add(big);
		
		JLabel lblNewLabel_1 = new JLabel("QUANTITY");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel_1.setBounds(23, 80, 125, 25);
		lblNewLabel_1.setBorder(lineborder);
		panel.add(lblNewLabel_1);
		
		textField = new JTextField();
		textField.setBounds(23, 117, 125, 30);
		panel.add(textField);
		textField.setColumns(10);
		
		
	}
	
	private class addOrderListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			String selected = comboBox.getSelectedItem().toString();
			if(selected.equals("Select Topping")) {
				JOptionPane.showMessageDialog(null, "SELECT TOPPING", "ERROR", JOptionPane.ERROR_MESSAGE);
			}
			else {			
				textArea.append(selected+"\n");
				order.add(selected);
			}
		}
		
	}
	
	private class submitOrderListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			if(size==0) {
				JOptionPane.showMessageDialog(null, "SELECT CAKE SIZE", "ERROR", JOptionPane.ERROR_MESSAGE);
			}
			else {
				String enteredQuantity = textField.getText();
				if(enteredQuantity.length()==0) {
					quantity = 1;
				}else {
						int quant = Integer.parseInt(enteredQuantity);
						quantity = quant;
				}
				String[] orderArray = new String[order.size()];
				for(int i=0; i<orderArray.length; i++) {
					orderArray[i] = order.get(i);
				}			
				cakeClass.orderCake(orderArray, quantity, size);
				cakeClass.printOrder();
				String userOrder = cakeClass.GUIOrder();
				textArea_1.append(userOrder);
				writeToFile(userOrder);
			}
		}
	}
	
	private class RadioButtonListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			if(e.getSource()==small) {
				size = 1;
			}else if(e.getSource()==medium) {
				size = 2;
			}else if(e.getSource()==big) {
				size = 3;
			}
		}
		
	}
	
	private void writeToFile(String data) {
		try {
			FileWriter writer = new FileWriter("files\\lab6e3.1.txt", true);
			writer.write(data);
			writer.close();
			JOptionPane.showMessageDialog(null, "ORDER SUCCESSFULLY SAVED");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateComboBox(String[] topping) {
		for(int i=0; i<topping.length; i++) {
			comboBox.addItem(topping[i]);
		}
	}
	
	public static void main(String[] args) {
		cakeClass = new Cake("Generic");
	    String[] topping = {"Lava Chocolate", "Cream Cheese", "Candy Pop", "Fondant"};
	    cakeClass.setCake(topping, 45.00, 65.00, 80.00); 
	    
	    lab6e3a object = new lab6ex3A(cakeClass);
	    object.updateComboBox(topping);
	    
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class for cake
public class Cake {
	private String name;
	private String[] topping; 
	private String[] toppingOrder;
	private double priceSmall;
	private double priceMedium; 
	private double priceBig; 
	private double totalPrice; 
	private int size;
	private int quantity;
	
	public Cake(String cakeName) {
		this.name = cakeName;
	}
	
	public void setTopping(String[] topping) {
		this.topping = topping;
	}
	
	public void setSmallPrice(double small) {
		this.priceSmall = small;
	}
	
	public void setMediumPrice(double medium) {
		this.priceSmall = medium;
	}
	
	public void setBigPrice(double big) {
		this.priceSmall = big;
	}
	
	public void setCake(String[] topping, double priceSmall, double priceMed, double priceBig) {
		this.topping = topping;
		this.priceSmall = priceSmall;
		this.priceMedium = priceMed;
		this.priceBig = priceBig;
	}
	
	public void orderCake(String[] toppingOrder, int quantity, int size) {
		this.toppingOrder = toppingOrder;
		this.quantity = quantity;
		this.size = size;
	}
	
	public double getSizePrice() {
		double price=0;
		if(size==1) {
			price = this.priceSmall;
		}else if(size==2) {
			price = this.priceMedium;
		}else if(size==3) {
			price = this.priceBig;
		}
		
		return price;
	}
	
	public double getTotalPrice() {
		this.totalPrice = (getSizePrice() * quantity) + (toppingOrder.length * 10);
		return totalPrice;
	}
	
	public int getQuantity(){
	    return quantity;  
	}
	
	public String getSize() {
		String sizeStatus="";
		if(this.size==1) {
			sizeStatus= "Small";
		}else if(this.size==2) {
			sizeStatus="Medium";
		}else if(this.size==3) {
			sizeStatus= "Big";
		}
		return sizeStatus;
	}
	
	public void printCake() {
		 System.out.println("-------------------------------------");
	      System.out.println("\t\tCake Menu\t\t");
	      System.out.println("-------------------------------------");
	      System.out.println(this.name + " cake with available toppings: ");

	      for(int i=0; i<topping.length; i++){
	         System.out.println((i+1)+ ") " + topping[i]);   
	      }

	      System.out.println("\nPrice: ");
	      System.out.printf("[1] Small  : RM%.2f\n", this.priceSmall);
	      System.out.printf("[2] Medium : RM%.2f\n", this.priceMedium);
	      System.out.printf("[3] Big    : RM%.2f\n", this.priceBig); 
	}
	
	public void printOrder() {
		System.out.println("\n");
	      System.out.println("Cake Order detail: ");
	      System.out.println("--------------------------------------------------");
	      System.out.print("Topping: ");

	      for(int i=0; i<toppingOrder.length; i++){
	            System.out.print((i+1)+ ") " + toppingOrder[i] + " ");   
	         }
	         
	      System.out.println("\nSize: " + getSize());
	      System.out.println("--------------------------------------------------");
	      System.out.printf("Total Price: RM %.2f\n",(getTotalPrice()));
	      System.out.println("--------------------------------------------------");
	}
	
	 public String GUIOrder(){
	      String txt = "Cake Order detail:\n";
	      txt += "-------------------------------------------\n";
	      txt += "Topping Order: \n";
	      for(int i=0; i<toppingOrder.length; i++){
	         txt += "(" + (i+1) + ") " + toppingOrder[i] + " \n";
	      } 
	      txt += "\nSize        : " + getSize() + "\n";
	      txt += "Quantity : " + getQuantity() + "\n";
	      txt += "-------------------------------------------\n";
	      txt += "Total Price: RM" + String.format("%.2f", getTotalPrice()) + "\n"; 
	      txt += "-------------------------------------------\n"; 
	      return txt;
	   }      
	
}
